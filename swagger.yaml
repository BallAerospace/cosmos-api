openapi: 3.0.0
info:
  title: Cosmos OpenAPI document
  version: 5.0.1
  contact:
    name: Cosmos Support
    url: https://cosmosc2.com
    email: cosmos@ballaerospace.com
components:
  parameters:
    authorization:
      name: authorization
      in: header
      description: The authorization to access the api
      required: true
      schema:
        type: string
    id:
      name: id
      in: path
      description: id to fetch
      required: true
      schema:
        type: string
    name:
      name: name
      in: path
      description: name to fetch
      required: true
      schema:
        type: string
    object:
      name: object
      in: path
      description: Object Id to request
      required: true
      schema:
        type: string
    scope:
      name: scope
      in: query
      description: scope
      required: true
      schema:
        type: string
    screen:
      name: screen
      in: path
      description: Cosmos target screen
      required: true
      schema:
        type: string
    target:
      name: target
      in: path
      description: Cosmos target
      required: true
      schema:
        type: string

  responses:
    '401':
      description: |-
        401 Unauthorized
      content:
        application/json:
          examples:
            redis:
              value: {
                "status": "error",
                "message": "message"
              }
    '403':
      description: |-
        403 Forbidden
      content:
        application/json:
          examples:
            redis:
              value: {
                "status": "error",
                "message": "message"
              }
paths:
  # resources :routers, only: [:index, :create]
  /cosmos-api/routers:
    get:
      tags:
        - "routers"
      operationId: routersGet
      summary: Get cosmos routers
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "routers"
      operationId: routersPost
      summary: Create a cosmos router
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/routers/:id', to: 'routers#show', id: /[^\/]+/
  /cosmos-api/routers/{id}:
    get:
      tags:
        - "routers"
      operationId: routersIdGet
      summary: Get cosmos router id
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/routers/:id', to: 'routers#update', id: /[^\/]+/, via: [:patch, :put]
    put:
      tags:
        - "routers"
      operationId: routersPut
      summary: Update a cosmos routers
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    patch:
      tags:
        - "routers"
      operationId: routersPatch
      summary: Update a cosmos router
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/routers/:id', to: 'routers#destroy', id: /[^\/]+/
    delete:
      tags:
        - "routers"
      operationId: routersDelete
      summary: Delete cosmos router
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # resources :interfaces, only: [:index, :create]
  /cosmos-api/interfaces:
    get:
      tags:
        - "interfaces"
      operationId: interfacesGet
      summary: Get cosmos interfaces
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "interfaces"
      operationId: interfacesPost
      summary: Create a cosmos interface
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/interfaces/:id', to: 'interfaces#show', id: /[^\/]+/
  /cosmos-api/interfaces/{id}:
    get:
      tags:
        - "interfaces"
      operationId: interfacesIdGet
      summary: Get a single cosmos interface
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/interfaces/:id', to: 'interfaces#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "interfaces"
      operationId: interfacesIdPatch
      summary: Update cosmos interface
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "interfaces"
      operationId: interfacesIdPut
      summary: Update cosmos interface
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/interfaces/:id', to: 'interfaces#destroy', id: /[^\/]+/
    delete:
      tags:
        - "interfaces"
      operationId: interfacesIdDelete
      summary: Delete a cosmos interface
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :targets, only: [:index, :create]
  /cosmos-api/targets:
    get:
      tags:
        - "targets"
      operationId: targetsGet
      summary: Get cosmos targets
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "targets"
      operationId: targetsPost
      summary: Create a cosmos target
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/targets/:id', to: 'targets#show', id: /[^\/]+/
  /cosmos-api/targets/{id}:
    get:
      tags:
        - "targets"
      operationId: targetsIdGet
      summary: Get a single cosmos targets
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/targets/:id', to: 'targets#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "targets"
      operationId: targetsIdPatch
      summary: Update a single cosmos targets
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "targets"
      operationId: targetsIdPut
      summary: Update a single cosmos targets
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/targets/:id', to: 'targets#destroy', id: /[^\/]+/
    delete:
      tags:
        - "targets"
      operationId: targetsIdDelete
      summary: Delete a single cosmos targets
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :gems, only: [:index, :create]
  /cosmos-api/gems:
    get:
      tags:
        - "gems"
      operationId: gemsGet
      summary: Get cosmos gems
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "gems"
      operationId: gemsPost
      summary: Create a cosmos gem
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/gems/:id', to: 'gems#show', id: /[^\/]+/
  /cosmos-api/gems/{id}:
    get:
      tags:
        - "gems"
      operationId: gemsIdGet
      summary: Get a single cosmos gem
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/gems/:id', to: 'gems#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "gems"
      operationId: gemsIdPatch
      summary: Update a single cosmos gem
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "gems"
      operationId: gemsIdPut
      summary: Update a single cosmos gem
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/gems/:id', to: 'gems#destroy', id: /[^\/]+/
    delete:
      tags:
        - "gems"
      operationId: gemsIdDelete
      summary: Delete a single cosmos gem
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :microservices, only: [:index, :create]
  /cosmos-api/microservices:
    get:
      tags:
        - "microservices"
      operationId: microservicesGet
      summary: Get cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "microservices"
      operationId: microservicesPost
      summary: Create a cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/microservices/:id', to: 'microservices#show', id: /[^\/]+/
  /cosmos-api/microservices/{id}:
    get:
      tags:
        - "microservices"
      operationId: microservicesIdGet
      summary: Get a single cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/microservices/:id', to: 'microservices#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "microservices"
      operationId: microservicesIdPatch
      summary: Update a single cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "microservices"
      operationId: microservicesIdPut
      summary: Update a single cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/microservices/:id', to: 'microservices#destroy', id: /[^\/]+/
    delete:
      tags:
        - "microservices"
      operationId: microservicesIdDelete
      summary: Delete a single cosmos microservices
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/microservice_status/:id', to: 'microservice_status#show', id: /[^\/]+/
  /cosmos-api/microservices_status/{id}:
    get:
      tags:
        - "microservices status"
      operationId: microservicesStatusGet
      summary: Get a cosmos microservices status
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # resources :tools, only: [:index, :create]
  /cosmos-api/tools:
    get:
      tags:
        - "tools"
      operationId: toolsGet
      summary: Get cosmos tools
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "tools"
      operationId: toolsPost
      summary: Create a cosmos tool
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/tools/:id', to: 'tools#show', id: /[^\/]+/
  /cosmos-api/tools/{id}:
    get:
      tags:
        - "tools"
      operationId: toolsIdGet
      summary: Get a single cosmos tools
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/tools/:id', to: 'tools#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "tools"
      operationId: toolsIdPatch
      summary: Update a single cosmos tools
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "tools"
      operationId: toolsIdPut
      summary: Update a single cosmos tools
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/tools/:id', to: 'tools#destroy', id: /[^\/]+/
    delete:
      tags:
        - "tools"
      operationId: toolsIdDelete
      summary: Delete a single cosmos tools
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post '/tools/position/:id', to: 'tools#position', id: /[^\/]+/
  /cosmos-api/tools/position/{id}:
    post:
      tags:
        - "tool position"
      operationId: toolsPositionGet
      summary: Update a tools position in the nav menu
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # resources :widgets, only: [:index, :create]
  /cosmos-api/widgets:
    get:
      tags:
        - "widgets"
      operationId: widgetsGet
      summary: Get cosmos widgets
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "widgets"
      operationId: widgetsPost
      summary: Create a cosmos widget
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/widgets/:id', to: 'widgets#show', id: /[^\/]+/
  /cosmos-api/widgets/{id}:
    get:
      tags:
        - "widgets"
      operationId: widgetsIdGet
      summary: Get a single cosmos widget
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/widgets/:id', to: 'widgets#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "widgets"
      operationId: widgetsIdPatch
      summary: Update a single cosmos widget
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "widgets"
      operationId: widgetsIdPut
      summary: Update a single cosmos widget
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/widgets/:id', to: 'widgets#destroy', id: /[^\/]+/
    delete:
      tags:
        - "widgets"
      operationId: widgetsIdDelete
      summary: Delete a single cosmos widget
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :plugins, only: [:index, :create]
  /cosmos-api/plugins:
    get:
      tags:
        - "plugins"
      operationId: pluginsGet
      summary: Get cosmos plugins
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "plugins"
      operationId: pluginsPost
      summary: Create a cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/plugins/:id', to: 'plugins#show', id: /[^\/]+/
  /cosmos-api/plugins/{id}:
    get:
      tags:
        - "plugins"
      operationId: pluginsIdGet
      summary: Get a single cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/plugins/:id', to: 'plugins#update', id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "plugins"
      operationId: pluginsIdPatch
      summary: Update a single cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "plugins"
      operationId: pluginsIdPut
      summary: Update a single cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/plugins/:id', to: 'plugins#destroy', id: /[^\/]+/
    delete:
      tags:
        - "plugins"
      operationId: pluginsIdDelete
      summary: Delete a single cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post '/plugins/install/:id', to: 'plugins#install', id: /[^\/]+/
  /cosmos-api/plugins/install/{id}:
    post:
      tags:
        - "install plugin"
      operationId: pluginsInstallIdPost
      summary: Install a single cosmos plugin
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :environment, only: [:index, :create]
  /cosmos-api/environment:
    get:
      tags:
        - "environment"
      operationId: environmentsGet
      summary: Get cosmos environment
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "environment"
      operationId: environmentPost
      summary: Create a cosmos environment
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/environment/:name', to: 'environment#destroy', name: /[^\/]+/
  /cosmos-api/environment/{name}:
    delete:
      tags:
        - "environment"
      operationId: environmentIdDelete
      summary: Delete a single cosmos environment
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # resources :timeline, only: [:index, :create]
  /cosmos-api/timeline:
    get:
      tags:
        - "timeline"
      operationId: timelineGet
      summary: Get cosmos timelines
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      responses:
        '200':
          description: |-
            Returns an array/list of timeline values
          content:
            application/json:
              examples:
                timelines:
                  value: [{"name":"system42","color":"#7ed21b","scope":"DEFAULT","updated_at":1638553977861814500}]
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    post:
      tags:
        - "timeline"
      operationId: timelinePost
      summary: Create a cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              'name with no color value':
                value: {
                  "name": "system42"
                }
              namePlusColor:
                value: {
                  "name": "system42",
                  "color": "#FFFFFF"
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/timeline/:name', to: 'timeline#show', name: /[^\/]+/
  /cosmos-api/timeline/{name}:
    get:
      tags:
        - "timeline"
      operationId: timelineGetName
      summary: Get a cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/timeline/:name', to: 'timeline#destroy', name: /[^\/]+/
    delete:
      tags:
        - "timeline"
      operationId: timelineDeleteName
      summary: Delete a cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/timeline/:name/color', to: 'timeline#color', name: /[^\/]+/
  /cosmos-api/timeline/{name}/color:
    post:
      tags:
        - "timeline"
      operationId: timelineColorPostName
      summary: Update cosmos timeline color
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # post '/timeline/activities/create', to: 'activity#multi_create'
  /cosmos-api/timeline/activities/create:
    post:
      tags:
        - "timeline"
      operationId: timelineMultiCreatePost
      summary: Update cosmos timeline with multiple activities
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/timeline/activities/delete', to: 'activity#multi_destroy'
  /cosmos-api/timeline/activities/delete:
    post:
      tags:
        - "timeline"
      operationId: timelineMultiDeletePost
      summary: Delete multiple activities on a cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # get '/timeline/:name/count', to: 'activity#count', name: /[^\/]+/
  /cosmos-api/timeline/{name}/count:
    get:
      tags:
        - "timeline"
      operationId: getTimelineNameCount
      summary: Get the number of activities on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/timeline/:name/activities', to: 'activity#index', name: /[^\/]+/
  /cosmos-api/timeline/{name}/activities:
    get:
      tags:
        - "timeline"
      operationId: getTimelineActivities
      summary: Get activities on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/timeline/:name/activities', to: 'activity#create', name: /[^\/]+/
    post:
      tags:
        - "timeline"
      operationId: postTimelineActivities
      summary: Create an activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/timeline/:name/activity/:id', to: 'activity#show', name: /[^\/]+/, id: /[^\/]+/
  /cosmos-api/timeline/{name}/activity/{id}:
    get:
      tags:
        - "activity"
      operationId: getTimelineActivityId
      summary: Get activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/timeline/:name/activity/:id', to: 'activity#event', name: /[^\/]+/, id: /[^\/]+/
    post:
      tags:
        - "activity"
      operationId: postTimelineActivityId
      summary: Get activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/timeline/:name/activity/:id', to: 'activity#update', name: /[^\/]+/, id: /[^\/]+/, via: [:patch, :put]
    patch:
      tags:
        - "activity"
      operationId: patchTimelineActivityId
      summary: Update an activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    put:
      tags:
        - "activity"
      operationId: putTimelineActivityId
      summary: Update an activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # delete '/timeline/:name/activity/:id', to: 'activity#destroy', name: /[^\/]+/, id: /[^\/]+/
    delete:
      tags:
        - "activity"
      operationId: deleteTimelineActivityId
      summary: Delete an activity on cosmos timeline
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/name'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/autonomic/group', to: 'trigger_group#index'
  /cosmos-api/autonomic/group:
    get:
      tags:
        - "trigger group"
      operationId: getAutonomicTriggerGroups
      summary: Get a list of autonomic trigger groups
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/group', to: 'trigger_group#create'
    post:
      tags:
        - "trigger group"
      operationId: postAutonomicTriggerGroups
      summary: Create a new autonomic trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              name:
                value: {
                  "name": "group42"
                }
              namePlusColor:
                value: {
                  "name": "group42",
                  "color": "#FFFFFF"
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/autonomic/group/:group', to: 'trigger_group#show', group: /[^\/]+/
  /cosmos-api/autonomic/group/{group}:
    get:
      tags:
        - "trigger group"
      operationId: getAutonomicTriggerGroup
      summary: Get an autonomic trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/autonomic/group/:group', to: 'trigger_group#destroy', group: /[^\/]+/
    delete:
      tags:
        - "trigger group"
      operationId: deleteAutonomicTriggerGroup
      summary: Delete an autonomic trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/group/:group/activate', to: 'trigger_group#activate', group: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/activate:
    post:
      tags:
        - "trigger group"
      operationId: postActivateAutonomicTriggerGroups
      summary: Activate an autonomic trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      requestBody:
        content: 
          application/json:
            examples:
              activate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/group/:group/deactivate', to: 'trigger_group#deactivate', group: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/deactivate:
    post:
      tags:
        - "trigger group"
      operationId: postDeactivateAutonomicTriggerGroups
      summary: Deactivate an autonomic trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      requestBody:
        content: 
          application/json:
            examples:
              activate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/autonomic/:group/trigger', to: 'trigger#index', group: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/trigger:
    get:
      tags:
        - "trigger group"
      operationId: getAutonomicTriggerGroupTriggers
      summary: Get a list of autonomic trigger group triggers
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/:group/trigger', to: 'trigger#create', group: /[^\/]+/
    post:
      tags:
        - "trigger"
      operationId: postAutonomicTriggerGroupTrigger
      summary: Create a new autonomic trigger in a trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      requestBody:
        content: 
          application/json:
            examples:
              trigger:
                value: {
                  "description": "INST ADCS POSX > 690000",
                  "group": "group42",
                  "left": {
                    "type": "item",
                    "target": "INST",
                    "packet": "ADCS",
                    "item": "POSX",
                    "raw": true,
                  },
                  "operator": ">",
                  "right": {
                    "type": "value",
                    "value": 690000,
                  }
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/autonomic/:group/trigger/:name', to: 'trigger#show', group: /[^\/]+/, name: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/trigger/{name}:
    get:
      tags:
        - "trigger"
      operationId: getAutonomicTriggerGroupTrigger
      summary: Get an autonomic trigger in a trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/autonomic/:group/trigger/:name', to: 'trigger#destroy', group: /[^\/]+/, name: /[^\/]+/
    delete:
      tags:
        - "trigger"
      operationId: deleteAutonomicTriggerGroupTrigger
      summary: Delete an autonomic trigger in a trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/:group/trigger/:name/activate', to: 'trigger#activate', group: /[^\/]+/, name: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/trigger/{name}/activate:
    post:
      tags:
        - "trigger"
      operationId: postActivateAutonomicTriggerGroupTrigger
      summary: Activate an autonomic trigger in a trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      - $ref: '#/components/parameters/name'
      requestBody:
        content: 
          application/json:
            examples:
              activate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/:group/trigger/:name/deactivate', to: 'trigger#deactivate', group: /[^\/]+/, name: /[^\/]+/
  /cosmos-api/autonomic/group/{group}/trigger/{name}/deactivate:
    post:
      tags:
        - "trigger"
      operationId: postDeactivateAutonomicTriggerGroupTrigger
      summary: Activate an autonomic trigger in a trigger group
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/group'
      - $ref: '#/components/parameters/name'
      requestBody:
        content: 
          application/json:
            examples:
              deactivate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/autonomic/reaction', to: 'reaction#index'
  /cosmos-api/autonomic/reaction:
    get:
      tags:
        - "reaction"
      operationId: getAutonomicReaction
      summary: Get a list of autonomic reactions
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/autonomic/reaction', to: 'reaction#create'
    post:
      tags:
        - "reaction"
      operationId: postAutonomicReaction
      summary: Create an autonomic reactions
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              reaction:
                value: {
                  "description": "Run INST CLEAR",
                  "snooze": 300,
                  "review": true,
                  "triggers": [
                    {
                      "name": "TV0-1234",
                      "group": "foo",
                    }
                  ],
                  "actions": [
                    {
                      "type": "command",
                      "value": "INST CLEAR",
                    }
                  ]
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/autonomic/reaction/:name', to: 'reaction#show', name: /[^\/]+/
  /cosmos-api/autonomic/reaction/{name}:
    get:
      tags:
        - "reaction"
      operationId: getActivateAutonomicReaction
      summary: Activate an autonomic reaction
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/autonomic/reaction/:name', to: 'reaction#destroy', name: /[^\/]+/
    delete:
      tags:
        - "reaction"
      operationId: deleteActivateAutonomicReaction
      summary: Delete an autonomic reaction
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post '/autonomic/reaction/:name/activate', to: 'reaction#activate', name: /[^\/]+/
  /cosmos-api/autonomic/reaction/{name}/activate:
    post:
      tags:
        - "reaction"
      operationId: postActivateAutonomicReaction
      summary: Activate an autonomic reaction
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/name'
      requestBody:
        content: 
          application/json:
            examples:
              activate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post '/autonomic/reaction/:name/deactivate', to: 'reaction#deactivate', name: /[^\/]+/
  /cosmos-api/autonomic/reaction/{name}/deactivate:
    post:
      tags:
        - "reaction"
      operationId: postDeactivateAutonomicReaction
      summary: Deactivate an autonomic reaction
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/name'
      requestBody:
        content: 
          application/json:
            examples:
              deactivate:
                value: {}
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/metadata', to: 'metadata#index'
  /cosmos-api/metadata:
    get:
      tags:
        - "metadata"
      operationId: getMetadata
      summary: Get list of metadata
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              deactivate:
                value: [{}]
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/metadata', to: 'metadata#create'
    post:
      tags:
        - "metadata"
      operationId: postMetadata
      summary: Create a new metadata object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                  "target": "INST",
                  "start": "2031-04-16T01:02:00.001+00:00",
                  "color": "#FF0000",
                  "metadata": {"version": "v1234567"}
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/metadata/:id', to: 'metadata#show', id: /[^\/]+/
  /cosmos-api/metadata/{id}:
    get:
      tags:
        - "metadata"
      operationId: getMetadataObject
      summary: Get a single metadata object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/metadata/:id', to: 'metadata#update', id: /[^\/]+/, via: [:patch, :put]
    put:
      tags:
        - "metadata"
      operationId: putMetadataObject
      summary: Update a metadata object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                  "target": "INST",
                  "start": "2031-04-16T01:02:00.001+00:00",
                  "color": "#FF0000",
                  "metadata": {"version": "v2"}
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    patch:
      tags:
        - "metadata"
      operationId: patchMetadataObject
      summary: Update a metadata object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                  "target": "INST",
                  "start": "2031-04-16T01:02:00.001+00:00",
                  "color": "#FF0000",
                  "metadata": {"version": "v2"}
                }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/metadata/:id', to: 'metadata#delete', id: /[^\/]+/
    delete:
      tags:
        - "metadata"
      operationId: deleteMetadataObject
      summary: Delete a metadata object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/metadata/_search', to: 'metadata#search'
  /cosmos-api/metadata/_search:
    get:
      tags:
        - "metadata"
      operationId: getSearchMetadata
      summary: Search for metadata
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # get '/metadata/_get/:name', to: 'metadata#get'
  /cosmos-api/metadata/_get/{name}:
    get:
      tags:
        - "metadata"
      operationId: getCurrentMetadata
      summary: Returns current metadata
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/name'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/narrative', to: 'narrative#index'
  /cosmos-api/narrative:
    get:
      tags:
        - "narrative"
      operationId: getNarrative
      summary: Get a list narrative object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post '/narrative', to: 'narrative#create'
    post:
      tags:
        - "narrative"
      operationId: postNarrative
      summary: Create a new narrative object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                    "start": "2031-04-16T01:02:00+00:00",
                    "stop": "2031-04-16T02:02:00+00:00",
                    "color": "#FF0000",
                    "description": "I'm off to see the wizard!",
                  }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/narrative/:id', to: 'narrative#show', id: /[^\/]+/
  /cosmos-api/narrative/{id}:
    get:
      tags:
        - "narrative"
      operationId: getNarrativeObject
      summary: Get a single narrative object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # match '/narrative/:id', to: 'narrative#update', id: /[^\/]+/, via: [:patch, :put]
    put:
      tags:
        - "narrative"
      operationId: putNarrative
      summary: Update a narrative object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                    "start": "2031-04-16T01:02:00+00:00",
                    "stop": "2031-04-16T02:02:00+00:00",
                    "color": "#FF0000",
                    "description": "The wonderful wizard of Oz!",
                  }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
    patch:
      tags:
        - "narrative"
      operationId: patchNarrative
      summary: Update a narrative object
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/scope'
      - $ref: '#/components/parameters/id'
      requestBody:
        content: 
          application/json:
            examples:
              metadata:
                value: {
                    "start": "2031-04-16T01:02:00+00:00",
                    "stop": "2031-04-16T02:02:00+00:00",
                    "color": "#FF0000",
                    "description": "The wonderful wizard of Oz!",
                  }
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # delete '/narrative/:id', to: 'narrative#delete', id: /[^\/]+/
  # get '/narrative/_search', to: 'narrative#search'

  # get '/autocomplete/reserved-item-names', to: 'script_autocomplete#get_reserved_item_names'
  # get '/autocomplete/keywords/:type', to: 'script_autocomplete#get_keywords', type: /[^\/]+/
  # get '/autocomplete/data/:type', to: 'script_autocomplete#get_ace_autocomplete_data', type: /[^\/]+/

  # get '/storage/download/:object_id', to: 'storage#get_download_presigned_request', object_id: /[^\/]+/
  /cosmos-api/storage/download/{object_id}:
    get:
      tags:
        - "storage"
      operationId: storageDownloadGet
      summary: Storage API Download
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/object'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get '/storage/upload/:object_id', to: 'storage#get_upload_presigned_request', object_id: /[^\/]+/
  /cosmos-api/storage/upload/{object_id}:
    get:
      tags:
        - "storage"
      operationId: storageUploadGet
      summary: Storage API Upload
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/object'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/screen" => "api#screen_save"
  /cosmos-api/screen:
    post:
      tags:
        - "screen"
      operationId: screenPost
      summary: Save a screen
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get "/screen/:target" => "api#screens"
  /cosmos-api/screen/{target}:
    get:
      tags:
        - "screen"
      operationId: getScreen
      summary: Get screens from a target
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/target'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get "/screen/:target/:screen" => "api#screen"
  /cosmos-api/screen/{target}/{screen}:
    get:
      tags:
        - "screen"
      operationId: getScreenTarget
      summary: Get a screen from a target
      parameters:
      - $ref: '#/components/parameters/authorization'
      - $ref: '#/components/parameters/screen'
      - $ref: '#/components/parameters/target'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # post "/api" => "api#api"
  /cosmos-api/api:
    post:
      tags:
        - "api"
      operationId: apiPost
      summary: Json-RPC API
      parameters:
      - $ref: '#/components/parameters/authorization'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # get "/auth/token-exists" => "auth#token_exists"
  /cosmos-api/auth/token-exists:
    get:
      tags:
        - "auth"
      operationId: authTokenExistsPost
      summary: Token exists
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/auth/verify" => "auth#verify"
  /cosmos-api/auth/verify:
    post:
      tags:
        - "auth"
      operationId: authTokenVerifyPost
      summary: Token verify
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/auth/set" => "auth#set"
  /cosmos-api/auth/set:
    get:
      tags:
        - "auth"
      operationId: authTokenSetPost
      summary: Token Set
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
 
  # get "/internal/metrics" => "internal_metrics#index"
  /cosmos-api/internal/metrics:
    get:
      tags:
        - "internal"
      operationId: internalMetrics
      summary: Get metrics from cosmos
      responses:
        '200':
          description: |-
            200 response
          content:
            plain/text:
              examples:
                metrics:
                  value: |-
                    # TYPE metric_output_duration_seconds histogram
                    # HELP metric_output_duration_seconds internal metric generated from cosmos/utilities/metric.rb.
                    metric_output_duration_seconds{scope="DEFAULT",microservice="DEFAULT__DECOMLOG__TEMPLATED",percentile="10"} 0.00041795999932219273
                    metric_output_duration_seconds{scope="DEFAULT",microservice="DEFAULT__DECOMLOG__TEMPLATED",percentile="50"} 0.0005948000034550205
                    metric_output_duration_seconds{scope="DEFAULT",microservice="DEFAULT__DECOMLOG__TEMPLATED",percentile="90"} 0.0011830799994640984
                    metric_output_duration_seconds{scope="DEFAULT",microservice="DEFAULT__DECOMLOG__TEMPLATED",percentile="95"} 0.0015175499993347328
                    metric_output_duration_seconds{scope="DEFAULT",microservice="DEFAULT__DECOMLOG__TEMPLATED",percentile="99"} 0.0031585980016825416
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get "/internal/status" => "internal_status#status"
  /cosmos-api/internal/status:
    get:
      tags:
        - "internal"
      operationId: internalStatus
      summary: Get the status of cosmos
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              examples:
                up:
                  value: {
                    "status": "UP"
                  }
                down:
                  value: {
                    "status": "DOWN"
                  }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get "/internal/health" => "internal_health#health"
  /cosmos-api/internal/health:
    get:
      tags:
        - "internal"
      operationId: internalHealth
      summary: Get the status of cosmos-redis
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              examples:
                redis:
                  value: {
                    "redis": {}
                  }
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get "/time" => "time#get_current"
  /cosmos-api/time:
    get:
      tags:
        - "time"
      operationId: getTime
      summary: Get the time of the cosmos server
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              examples:
                redis:
                  value: {
                    "now_nsec":1637364986539504300
                  }
 
  # get "map.json" => "tools#importmap"
  /cosmos-api/map.json:
    get:
      tags:
        - "map"
      operationId: mapJsonGet
      summary: Get the map
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              examples:
                redis:
                  value: {
                    "imports":{
                      "@cosmosc2/tool-scriptrunner":"/tools/scriptrunner/js/app.js",
                      "@cosmosc2/tool-dataextractor":"/tools/dataextractor/js/app.js"
                    }
                  }
 
  # get  "/scripts" => "scripts#index"
  /script-api/scripts:
    get:
      tags:
        - "scripts"
      operationId: getScripts
      summary: Get script
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/scripts/syntax" => "scripts#syntax"
  /script-api/syntax:
    post:
      tags:
        - "syntax"
      operationId: postSyntax
      summary: Get syntax
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # get  "/scripts/*name" => "scripts#body", format: false, defaults: { format: 'html' }
  /script-api/{name}:
    get:
      tags:
        - "script"
      operationId: getScript
      summary: Get a single script
      parameters:
      - name: name
        in: path
        description: script name
        required: true
        schema:
          type: string
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post "/scripts/*name" => "scripts#create", format: false, defaults: { format: 'html' }
    post:
      tags:
        - "script"
      operationId: postScript
      summary: Post a single script
      parameters:
      - name: name
        in: path
        description: script name
        required: true
        schema:
          type: string
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/scripts/*name/run(/:disconnect)" => "scripts#run", format: false, defaults: { format: 'html' }
  /script-api/{name}/run:
    post:
      tags:
        - "script"
      operationId: postRunScript
      summary: Get a single script
      parameters:
      - name: name
        in: path
        description: script name
        required: true
        schema:
          type: string
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /script-api/{name}/run/disconnect:
    post:
      tags:
        - "script"
      operationId: postDisconnectScript
      summary: Post a single script
      parameters:
      - name: name
        in: path
        description: script name
        required: true
        schema:
          type: string
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # post "/scripts/*name/delete" => "scripts#destroy", format: false, defaults: { format: 'html' }
  /script-api/{name}/delete:
    post:
      tags:
        - "script"
      operationId: postDeleteScript
      summary: Remove a single script
      parameters:
      - name: name
        in: path
        description: script name
        required: true
        schema:
          type: string
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403' 

  # get  "/running-script" => "running_script#index"
  /script-api/running-script:
    get:
      tags:
        - "running-script"
      operationId: getRunningScripts
      summary: Get running scripts
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403' 

  # get  "/running-script/:id" => "running_script#show"
  /script-api/running-script/{id}:
    get:
      tags:
        - "running-script"
      operationId: getRunningScriptId
      summary: get running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/start" => "running_script#start"
  /script-api/running-script/{id}/start:
    post:
      tags:
        - "running-script"
      operationId: postStartScriptId
      summary: Start running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/stop" => "running_script#stop"
  /script-api/running-script/{id}/stop:
    post:
      tags:
        - "running-script"
      operationId: postStopScriptId
      summary: Stop running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/pause" => "running_script#pause"
  /script-api/running-script/{id}/pause:
    post:
      tags:
        - "running-script"
      operationId: postPauseScriptId
      summary: Pause running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/retry" => "running_script#retry"
  /script-api/running-script/{id}/retry:
    post:
      tags:
        - "running-script"
      operationId: postRetryScriptId
      summary: Retry running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/go" => "running_script#go"
  /script-api/running-script/{id}/go:
    post:
      tags:
        - "running-script"
      operationId: postGoScriptId
      summary: Retry running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/step" => "running_script#step"
  /script-api/running-script/{id}/step:
    post:
      tags:
        - "running-script"
      operationId: postStepScriptId
      summary: Step running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/prompt" => "running_script#prompt"
  /script-api/running-script/{id}/prompt:
    post:
      tags:
        - "running-script"
      operationId: postPromptScriptId
      summary: Prompt running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  # post "/running-script/:id/:method" => "running_script#method"
  /script-api/running-script/{id}/method:
    post:
      tags:
        - "running-script"
      operationId: postMethodScriptId
      summary: Method running script by id
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
